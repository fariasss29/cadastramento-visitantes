import {
    Alert,
    Box,
    Button,
    FormControl,
    FormControlLabel,
    FormLabel,
    MenuItem,
    Paper,
    Radio,
    RadioGroup,
    TextField,
    Typography
  } from '@mui/material'
  import { useForm, Controller } from 'react-hook-form'
  import axios from '@/services/axios'
  import { useState } from 'react';
  import toast from 'react-hot-toast'
  import { useNavigate } from 'react-router-dom'
  import ModalCadastroVisita from '@/components/visitantes/ModalCadastroVisita'



  
  const visitantes = [
    { id: 1, nome: 'sla' },
    { id: 2, nome: 'sla' },
    { id: 3, nome: 'sla' }

  ]

  const empresa = [
    {id : 1, nome: 'empresaX'},
    {id : 2, nome: 'empresaY'},
    {id : 3, nome: 'empresaZ'},
  ]
  
  const solicitantes = visitantes
  
  const motivos = ['Reunião', 'Visita Técnica']
  
  const opcoes = ['Notebook', 'EPI', 'Fotos', 'Fábrica', 'Estacionamento']

  
  export default function CadastroVisita() {
    const navigate = useNavigate()

    const [open, setOpenConfirmModal] = useState(false)
    const [id, setId] = useState('')

    const handleOpenModalIfValid = async () => {
      const valid = await trigger(); // dispara a validação dos campos
      if (valid) {
        setOpenConfirmModal(true); // só abre o modal se estiver válido
      }
    }

    const openModalCadastroVisita = () => {
      setOpenConfirmModal(true)
    }
    
    const handleCloseCadastroVisita = () => {
      setOpenConfirmModal(false)
    }

    const handleModal = (NovoId) => {
      setId(NovoId)
      setOpenConfirmModal(true)
    }

    const handleConfirm = async () => {
      const dados = getValues(); // pega os dados atuais do formulário
      try {
        toast.loading('Salvando...', { id: 'salvando' });
        const response = await axios.post('/visitantes/visita/criar', dados);
        toast.success(response.data.message, { id: 'salvando' });
        navigate('/visitantes/inicial');
      } catch (err) {
        const mensagemErro = err.response?.data?.message || 'Erro ao salvar';
        toast.error(mensagemErro, { id: 'salvando' });
      } finally {
        setOpenConfirmModal(false); // fecha o modal depois do envio
      }
    };

    const {
      register,
      handleSubmit,
      control,
      formState: { errors },
      getValues,
      trigger
    } = useForm()
  
    const onSubmit = async (dados) => {
      try {
        toast.loading('Salvando...', { id: 'salvando' })
        const response = await axios.post('/visitantes/visita/criar', dados)
        toast.success(response.data.message, { id: 'salvando' })
        navigate('/visitantes/inicial')
      } catch (err) {
        const mensagemErro = err.response?.data?.message || 'Erro ao salvar'
        toast.error(mensagemErro, { id: 'salvando' })
      }
    }
  
    const ErrorAlert = ({ campo }) =>
      campo ? (
        <Alert variant='outlined' severity='error' sx={{ mt: 1 }}>
          {campo.message || 'Campo obrigatório'}
        </Alert>
      ) : null
  
    return (
      <Box sx={{ width: '100%', px: 3, mt: 3 }}>
        <Typography variant='h3' mb={2}>
          Cadastro de Visita
        </Typography>
  
        <Paper sx={{ p: 4, borderRadius: 5 }}>
          <form onSubmit={handleSubmit(onSubmit)}>
            <Box sx={{ display: 'flex', flexDirection: 'column', gap: 3 }}>
  
              <Box>
                <TextField
                  select
                  label='Nome do Visitante'
                  fullWidth //ocupe toda a largura disponível do seu container pai.
                  defaultValue='' //retornando o valores
                  {...register('visitante_id', { required: true })} //registrando
                >
                  {visitantes.map((v) => (
                    <MenuItem key={v.id} value={v.id}>
                      {v.nome}
                    </MenuItem>
                  ))}
                </TextField>
                <ErrorAlert campo={errors.visitante_id} />
              </Box>

              <Box>
                <TextField
                select
                label='Empresa'
                fullWidth
                defaultValue=''
                {...register('empresa_id', {required: true})}
                >
                 {empresa.map((z) => (   
                    <MenuItem key={z.id} value={z.id}>
                      {z.nome}
                    </MenuItem>
                 ))}
                </TextField>
                <ErrorAlert campo={errors.visitante_id} />
              </Box>

  
              <Box>
                <TextField
                  select
                  label='Motivo da Visita'
                  fullWidth
                  defaultValue=''
                  {...register('motivo', { required: true })}
                >
                  {motivos.map((motivo, index) => (
                    <MenuItem key={index} value={motivo}>
                      {motivo}
                    </MenuItem>
                  ))}
                </TextField>
                <ErrorAlert campo={errors.motivo} />
              </Box>
  
              <Box>
                <TextField
                  select
                  label='Solicitante'
                  fullWidth
                  defaultValue=''
                  {...register('solicitante_id', { required: true })}
                >
                  {solicitantes.map((s) => (
                    <MenuItem key={s.id} value={s.id}>
                      {s.nome}
                    </MenuItem>
                  ))}
                </TextField>
                <ErrorAlert campo={errors.solicitante_id} />
              </Box>
  
              <Box sx={{display: 'flex', flexWrap: 'wrap', justifyContent: 'space-between' }}>
                {opcoes.map((item) => (
                  <FormControl
                    key={item}
                    component='fieldset'
                    sx={{ display: 'flex', justifyContent: 'space-between', border: '1px solid #CCC', borderRadius: 2, p: 1 }}
                  >
                    <FormLabel component='legend' sx={{ fontWeight: 'bold', px: 1 }}>
                      {item}
                    </FormLabel>
                    <Controller
                      name={item}
                      control={control}
                      defaultValue='não'
                      render={({ field }) => (
                        <RadioGroup row {...field}>
                          {['sim', 'não'].map((valor) => (
                            <FormControlLabel
                              key={valor}
                              value={valor}
                              control={<Radio />}
                              label={valor.charAt(0).toUpperCase() + valor.slice(1)}
                              sx={{
                                m: 1,
                                px: 2,
                                py: 1,
                                border: '1px solid #ccc',
                                borderRadius: '10px',
                                width: '80px',
                                height: '50px',
                                justifyContent: 'center',
                                alignItems: 'center',
                                textAlign: 'center',
                                '& .MuiRadio-root': {
                                  p: 0,
                                  mr: 1,
                                  color: valor === 'sim' ? '#2e7d32' : '#d32f2f'
                                },
                                '& .MuiFormControlLabel-label': {
                                  fontSize: '1.2rem',
                                  fontWeight: '500'
                                }
                              }}
                            />
                          ))}
                        </RadioGroup>
                      )}
                    />
                  </FormControl>
                ))}
              </Box>
  
              <Button type='button' variant='contained' onClick={handleOpenModalIfValid}  fullWidth sx={{ mt : 2, py : 2, fontSize: '1.1rem' }}>
              Registrar Empresa
            </Button> 
          </Box>
        </form>
      </Paper>

      <ModalCadastroVisita 
      open={open} 
      handleClose={handleCloseCadastroVisita} 
      id={id} 
      Confirm={handleConfirm}
      />
    </Box>
  )
}
  
