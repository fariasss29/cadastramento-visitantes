import {
  Alert,
  Box,
  Button,
  Paper,
  TextField,
  Typography
} from '@mui/material'
import { Controller, useForm } from 'react-hook-form'
import { useState } from 'react';
import InputMask from 'react-input-mask'
import axios from '@/services/axios'
import toast from 'react-hot-toast'
import { useNavigate } from 'react-router-dom'
import ModalCadastroEmpresa from '@/components/visitantes/ModalCadastroEmpresa'
import { getValue } from '@mdxeditor/editor';




// Validação CNPJ
function validarCNPJ(cnpj) {
  cnpj = cnpj.replace(/[^\d]+/g, '') // trecho usado para limpar a str e manter somente numeros
  if (cnpj.length !== 14 || /^(\d)\1+$/.test(cnpj)) return false // verifica se o cpnj tem 14 digitos e se eles nao tem todos os mesmos numeros ex 9999999999

  let soma = 0 //inicia a soma com 0
  let pos = 5  //e o mutiplicador com 5
  for (let i = 0; i < 12; i++) { //entender esse calculo dps
    soma += +cnpj[i] * pos--
    if (pos < 2) pos = 9
  }
  let resto = soma % 11
  let digito1 = resto < 2 ? 0 : 11 - resto
  if (+cnpj[12] !== digito1) return false

  soma = 0
  pos = 6
  for (let i = 0; i < 13; i++) {
    soma += +cnpj[i] * pos--
    if (pos < 2) pos = 9
  }
  resto = soma % 11
  let digito2 = resto < 2 ? 0 : 11 - resto
  return +cnpj[13] === digito2
}

function isValidCEP(cep) {
  cep = cep.replace(/[^\d]+/g, '') // mantem so numeros no cep
  return cep.length === 8   // tem q ter 8 caracteres e essa length ou len é usada para determinar o tamanho da lista nesse casso do cep
}

export default function CadastroEmpresa() {
  const navigate = useNavigate()

  
  const {
    register,
    handleSubmit,
    setValue,
    watch,
    control,
    formState: { errors },
    getValues,
  } = useForm()

  const [open, setOpenConfirmModal] = useState(false)

  const handleCloseCadastroEmpresa = () => {
    setOpenConfirmModal(false)
  }

  const [isLoading, setIsLoading] = useState(false)

  async function buscarEmpresaPorCNPJ(cnpj) {
    const cnpjLimpo = cnpj.replace(/[^\d]+/g, '');

    const res = await toast.promise(axios.get(`https://brasilapi.com.br/api/cnpj/v1/${cnpjLimpo}`), {
      loading: () => {
        setIsLoading(true)
        return 'Carregando...'
      },
      success: () => {
        setIsLoading(false)
        return 'Dados carregados com sucesso!'
      },
      error: (err) => {
        const mensagemErro = err.response?.data?.message || 'Erro ao consultar CNPJ';
        return mensagemErro;
      }
    });

    // Agora res é a resposta do axios, e podemos devolver nosso objeto
    const data = res.data;
    return {
      razao_social: data.razao_social,
      nome_empresa: data.nome_fantasia || data.razao_social,
      ramo_atuacao: data.cnae_fiscal_descricao,
      cep: data.cep,
      rua: `${data.descricao_tipo_de_logradouro ?? ''} ${data.logradouro ?? ''}`.trim(),
      numero: data.numero || '',
      bairro: data.bairro,
      cidade: data.municipio,
      estado: data.uf,
    };
  }

  const confirmaCadastro = () => {
    const dados = getValues()
    const cnpjLimpo = dados.cnpj.replace(/[^\d]+/g, '')
    if (!validarCNPJ(cnpjLimpo)) {
      toast.error('CNPJ inválido.')
      return
    }

    toast.promise(
      axios.post('/visitantes/cadastro-empresa', dados), {
      loading: 'Carregando...',
      success: (res) => {
        setOpenConfirmModal(false);
        navigate('/visitantes/inicial');
        return res.data.message
      },

      error: (err) => {
        const mensagemErro = err.response?.data?.message || 'Erro ao salvar';
        return mensagemErro;
      }
    }
    )
  }

  const onSubmit = () => {
      setOpenConfirmModal(true)
    }

  const handleBuscarCNPJ = async () => {
      try {
        const dados = await buscarEmpresaPorCNPJ(watch('cnpj'))

        setValue('razao_social', dados.razao_social)
        setValue('nome_empresa', dados.nome_empresa)
        setValue('ramo_atuacao', dados.ramo_atuacao)
        setValue('cep', dados.cep)
        setValue('rua', dados.rua)
        setValue('numero', dados.numero)
        setValue('bairro', dados.bairro)
        setValue('cidade', dados.cidade)
        setValue('estado', dados.estado)
      } catch (err) {
        toast.error(err.message)
      }
    }


    const ErrorAlert = ({ campo }) =>
      campo ? (
        <Alert variant='outlined' sx={{ mt: 1 }} severity='error'>
          {campo.message || 'Campo obrigatório'}
        </Alert>
      ) : null

    return (
      <Box sx={{ maxWidth: 2000, mx: 'auto', mt: 3 }}>
        <Typography variant='h3' mb={2}>
          Cadastro de Empresa
        </Typography>

        <Paper sx={{ p: 3, borderRadius: 5 }}>
          <form onSubmit={handleSubmit(onSubmit)}>
            <Box sx={{ display: 'flex', flexDirection: 'column', gap: 3 }}>

              <Box sx={{ display: 'flex', gap: 2 }}>
                <Controller
                  name='cnpj'
                  control={control}
                  rules={{
                    required: true,
                    validate: (v) => validarCNPJ(v) || 'CNPJ inválido'
                  }}
                  render={({ field }) => (
                    <InputMask mask='99.999.999/9999-99' {...field}>
                      {(inputProps) => (
                        <TextField
                          {...inputProps}
                          label='CNPJ'
                          fullWidth
                        />
                      )}
                    </InputMask>
                  )}
                />
                <Button disabled={isLoading} variant='outlined' onClick={handleBuscarCNPJ} sx={{ height: '60px', px: 5, fontSize: '1rem' }}>
                  Buscar CNPJ
                </Button>
              </Box>
              <ErrorAlert campo={errors.cnpj} />

              <Box>
                <TextField
                  label='Nome da Empresa'
                  fullWidth
                  InputLabelProps={{ shrink: true }}
                  {...register('nome_empresa', { required: true })}
                />
                <ErrorAlert campo={errors.nome_empresa} />
              </Box>

              <Box>
                <TextField
                  label='Razão Social'
                  fullWidth
                  InputLabelProps={{ shrink: true }}
                  {...register('razao_social', { required: true })}
                />
                <ErrorAlert campo={errors.razao_social} />
              </Box>

              <Box>
                <TextField
                  label='Ramo de Atuação'
                  fullWidth
                  InputLabelProps={{ shrink: true }}
                  {...register('ramo_atuacao', { required: true })}
                />
                <ErrorAlert campo={errors.ramo_atuacao} />
              </Box>

              <Box>
                <Controller
                  name='cep'
                  control={control}
                  rules={{
                    required: true,
                    validate: (v) => isValidCEP(v) || 'CEP inválido'
                  }}
                  render={({ field }) => (
                    <InputMask mask='99999-999' {...field}>
                      {(inputProps) => (
                        <TextField
                          {...inputProps}
                          label='CEP'
                          fullWidth
                          InputLabelProps={{ shrink: true }}
                        />
                      )}
                    </InputMask>
                  )}
                />
                <ErrorAlert campo={errors.cep} />
              </Box>

              <Box sx={{ display: 'flex', gap: 2 }}>
                <Box sx={{ flex: 3 }}>
                  <TextField
                    label='Rua'
                    fullWidth
                    InputLabelProps={{ shrink: true }}
                    {...register('rua', { required: true })}
                  />
                  <ErrorAlert campo={errors.rua} />
                </Box>

                <Box sx={{ flex: 2 }}>
                  <TextField
                    label='Número'
                    type='number'
                    fullWidth
                    InputLabelProps={{ shrink: true }}
                    {...register('numero', { required: true })}
                  />
                  <ErrorAlert campo={errors.numero} />
                </Box>
              </Box>

              <Box sx={{ display: 'flex', gap: 2 }}>
                <Box sx={{ flex: 3 }}>
                  <TextField
                    label='Bairro'
                    fullWidth
                    InputLabelProps={{ shrink: true }}
                    {...register('bairro', { required: true })}
                  />
                  <ErrorAlert campo={errors.bairro} />
                </Box>

                <Box sx={{ flex: 2 }}>
                  <TextField
                    label='Cidade'
                    fullWidth
                    InputLabelProps={{ shrink: true }}
                    {...register('cidade', { required: true })}
                  />
                  <ErrorAlert campo={errors.cidade} />
                </Box>

                <Box sx={{ flex: 1 }}>
                  <TextField
                    label='Estado'
                    fullWidth
                    InputLabelProps={{ shrink: true }}
                    {...register('estado', { required: true })}
                  />
                  <ErrorAlert campo={errors.estado} />
                </Box>
              </Box>

              <Button type='submit' variant='contained' fullWidth sx={{ py: 2, fontSize: '1.1rem' }}>
                Registrar Empresa
              </Button>
            </Box>
          </form>
        </Paper>
        <ModalCadastroEmpresa
          open={open}
          handleClose={handleCloseCadastroEmpresa}
          confirm={confirmaCadastro}
        />
      </Box>
    )
  }
