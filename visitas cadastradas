import React from 'react';
import { Box, Paper, IconButton } from '@mui/material';
import { DataGrid, GridToolbar } from '@mui/x-data-grid';
import { useQuery } from 'react-query';
import axios from '@/services/axios';
import BackdropLoading from '@/components/BackdropLoading';
import Error from '@/components/Error';
import { BiEditAlt } from 'react-icons/bi';

export default function PessoasCadastradas() {
  const { isLoading, error, data } = useQuery('visitas', () =>
    axios.get('/visitantes/consultas_todas_visitas').then(r => r.data)
  );

  if (isLoading) return <BackdropLoading />;
  if (error)     return <Error error={error} />;

  const columns = [
    {
      field: 'acoes',
      headerName: 'Ações',
      width: 120,
      sortable: false,
      filterable: false,
      align: 'center',
      headerAlign: 'center',
      renderCell: ({ row }) => (
        <IconButton
          color="primary"
          size="small"
          onClick={() => console.log('Ver:', row.uuid)}
        >
          <BiEditAlt size={24} />
        </IconButton>
      )
    },
    { field: 'nome_completo', headerName: 'Visitante', width: 200, align: 'center', headerAlign: 'center' },
    { field: 'razao_social',  headerName: 'Empresa',   width: 200, align: 'center', headerAlign: 'center' },
    {
      field: 'data_visita',
      headerName: 'Data Visita',
      width: 120,
      align: 'center',
      headerAlign: 'center',
      renderCell: ({ value }) => {
        if (!value) return '';
        const dt = new Date(value);
        return isNaN(dt) ? '' : dt.toLocaleDateString('pt-BR');
      }
    },
    { field: 'solicitante',           headerName: 'Solicitante',          width: 140, align: 'center', headerAlign: 'center' },
    { field: 'motivo',                headerName: 'Motivo',               width: 100, align: 'center', headerAlign: 'center' },

    
    { field: 'notebook', headerName: 'Notebook', width: 140, align: 'center', headerAlign: 'center', renderCell: ({ value, row }) => { console.log('notebook:', value, row); return value === 1 ? 'Sim' : 'Não'; } },
    { field: 'epi',                   headerName: 'EPI',                  width: 200, align: 'center', headerAlign: 'center', renderCell: ({ value, row }) => { console.log('notebook:', value, row); return value === 1 ? 'Sim' : 'Não'; } },
    { field: 'foto',                  headerName: 'Foto',                 width: 200, align: 'center', headerAlign: 'center', renderCell: ({ value, row }) => { console.log('notebook:', value, row); return value === 1 ? 'Sim' : 'Não'; } },
    { field: 'estacionamento',        headerName: 'Estacionamento',       width: 200, align: 'center', headerAlign: 'center', renderCell: ({ value, row }) => { console.log('notebook:', value, row); return value === 1 ? 'Sim' : 'Não'; } },
    { field: 'fabrica',               headerName: 'Fábrica',              width: 200, align: 'center', headerAlign: 'center', renderCell: ({ value, row }) => { console.log('notebook:', value, row); return value === 1 ? 'Sim' : 'Não'; } },
    { field: 'observacoes',           headerName: 'Observações',          width: 200, align: 'center', headerAlign: 'center' },
    { field: 'fone_disponibilidade',  headerName: 'Fone Disponibilidade', width: 200, align: 'center', headerAlign: 'center' },
    { field: 'oculos_disponibilidade',headerName: 'Óculos Disponibilidade', width: 200, align: 'center', headerAlign: 'center' },
    { field: 'sapato_disponibilidade',headerName: 'Sapato Disponibilidade', width: 200, align: 'center', headerAlign: 'center' },
    { field: 'sapato_tamanho',        headerName: 'Sapato Tamanho',      width: 200, align: 'center', headerAlign: 'center' },
  ];

  return (
    <Box sx={{ width: '100%' }}>
      <Paper elevation={3} sx={{ height: 800, borderRadius: 2, overflow: 'hidden' }}>
        <DataGrid
          rows={data || []}
          columns={columns}
          getRowId={row => row.uuid}
          initialState={{ pagination: { paginationModel: { pageSize: 13 } } }}
          pageSizeOptions={[5]}
          disableRowSelectionOnClick
          slots={{ toolbar: GridToolbar }}
          slotProps={{
            toolbar: {
              showQuickFilter: true,
              quickFilterProps: { debounceMs: 300 }
            }
          }}
          sx={{
            '.MuiDataGrid-columnHeaders':   { backgroundColor: '#FFCCCC', color: '#333' },
            '.MuiDataGrid-row:hover':       { backgroundColor: '#f5f5f5' },
            '.MuiDataGrid-cell':            { borderBottom: '1px solid #ddd' },
            '.MuiDataGrid-footerContainer': { backgroundColor: '#f7f7f7' },
            
          }}
        />
      </Paper>
    </Box>
  );
}
