import React from 'react';
import { Box, Paper, IconButton } from '@mui/material';
import { DataGrid, GridToolbar } from '@mui/x-data-grid';
import { useQuery, useMutation, useQueryClient } from 'react-query';
import toast from 'react-hot-toast';
import { FaRegCircleCheck, FaRegCircleXmark } from 'react-icons/fa6';
import axios from '@/services/axios';
import BackdropLoading from '@/components/BackdropLoading';
import Error from '@/components/Error';

export default function PessoasCadastradas() {
  const queryClient = useQueryClient();
  const { isLoading, error, data } = useQuery('visitas', () =>
    axios.get('/visitantes/consulta_hse').then(r => r.data)
  );

  const updateapv = useMutation(
    apv =>
      axios.put(
        `/visitantes/separacao_hse/${apv.uuid}`,
        { separacao_hse: apv.separacao_hse }
      ),
    {
      onMutate: async apv => {
        await queryClient.cancelQueries('visitas');
        const previous = queryClient.getQueryData('visitas');
        queryClient.setQueryData('visitas', old =>
          old.map(item =>
            item.uuid === apv.uuid
              ? { ...item, separacao_hse: apv.separacao_hse }
              : item
          )
        );
        return { previous };
      },
      onError: (err, apv, context) => {
        queryClient.setQueryData('visitas', context.previous);
        toast.error(`Erro ao atualizar: ${err.message}`);
      },
      onSettled: () => {
        queryClient.invalidateQueries('visitas');
      }
    }
  );

  const handleApprove = row =>
    updateapv.mutate({ uuid: row.uuid, separacao_hse: 'Separado' });

  const handleReject = row =>
    updateapv.mutate({ uuid: row.uuid, separacao_hse: 'Não separado' });

  if (isLoading) return <BackdropLoading />;
  if (error)     return <Error error={error} />;

  const todayStart = new Date();
  todayStart.setHours(0, 0, 0, 0);
  const maxDays = 0;

  const filteredData = (data || [])
    .filter(row => {
      if (
        row.fone_disponibilidade === 'proprio' &&
        row.oculos_disponibilidade === 'proprio' &&
        row.sapato_disponibilidade === 'proprio'
      ) return false;
      const visitDate = new Date(row.data_visita);
      const diffInDays = (new Date() - visitDate) / (1000 * 3600 * 24);
      return diffInDays <= maxDays;
    })
    .sort((a, b) => {
      const da = new Date(a.data_visita);
      const db = new Date(b.data_visita);
      const aPast = da < todayStart;
      const bPast = db < todayStart;
      if (aPast && !bPast) return 1;
      if (!aPast && bPast) return -1;
      return da - db;
    });

  const pendentes     = filteredData.filter(r => !r.separacao_hse || r.separacao_hse === 'Pendente');
  const outros        = filteredData.filter(r => r.separacao_hse && r.separacao_hse !== 'Pendente');
  const rowsOrdenadas = [...pendentes, ...outros];

  const columns = [
    {
      field: 'separacoes_hse',
      headerName: 'Separações',
      width: 125,
      align: 'center',
      headerAlign: 'center',
      sortable: false,
      filterable: false,
      renderCell: ({ row }) => (
        <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', gap: 0.5 }}>
          <IconButton color="primary" size="small" onClick={() => handleApprove(row)}>
            <FaRegCircleCheck size={24} />
          </IconButton>
          <IconButton color="error" size="small" onClick={() => handleReject(row)}>
            <FaRegCircleXmark size={26} />
          </IconButton>
        </Box>
      )
    },
    {
      field: 'separacao_hse',
      headerName: 'Status',
      width: 130,
      align: 'center',
      headerAlign: 'center',
      renderCell: ({ row }) => {
        return row.separacao_hse || 'Pendente';  
      }
    },
    { field: 'nome_completo', headerName: 'Visitante', width: 200, align: 'center', headerAlign: 'center' },
    {
      field: 'data_visita',
      headerName: 'Data Visita',
      width: 175,
      align: 'center',
      headerAlign: 'center',
      renderCell: ({ value }) => {
        if (!value) return '';
        const dt = new Date(value);
        if (isNaN(dt)) return '';
        return dt.toLocaleDateString('pt-BR') + ' ' + dt.toLocaleTimeString('pt-BR');
      }
    },
    { field: 'solicitante', headerName: 'Solicitante', width: 140, align: 'center', headerAlign: 'center' },
    {
      field: 'epi',
      headerName: 'EPI',
      width: 100,
      align: 'center',
      headerAlign: 'center',
      renderCell: ({ value }) => (value === 1 ? 'Sim' : 'Não')
    },
    { field: 'fone_disponibilidade', headerName: 'Fone Disponibilidade', width: 180, align: 'center', headerAlign: 'center' },
    { field: 'oculos_disponibilidade', headerName: 'Óculos Disponibilidade', width: 180, align: 'center', headerAlign: 'center' },
    { field: 'sapato_disponibilidade', headerName: 'Sapato Disponibilidade', width: 180, align: 'center', headerAlign: 'center' },
    { field: 'sapato_tamanho', headerName: 'Sapato Tamanho', type: 'number', width: 140, align: 'center', headerAlign: 'center' },
    { field: 'observacoes', headerName: 'Observações', width: 200, align: 'center', headerAlign: 'center' },
  ];

  return (
    <Box sx={{ width: '100%' }}>
      <Paper elevation={3} sx={{ height: 800, borderRadius: 2, overflow: 'hidden' }}>
        <DataGrid
          rows={rowsOrdenadas}           
          columns={columns}
          getRowId={row => row.uuid}
          initialState={{ pagination: { paginationModel: { pageSize: 13 } } }}
          pageSizeOptions={[5]}
          disableRowSelectionOnClick
          slots={{ toolbar: GridToolbar }}
          slotProps={{
            toolbar: {
              showQuickFilter: true,
              quickFilterProps: { debounceMs: 300 }
            }
          }}
          sx={{
            '.MuiDataGrid-columnHeaders': { backgroundColor: '#FFCCCC', color: '#333' },
            '.MuiDataGrid-row:hover':      { backgroundColor: '#f5f5f5' },
            '.MuiDataGrid-cell':           { borderBottom: '1px solid #ddd' },
            '.MuiDataGrid-footerContainer':{ backgroundColor: '#f7f7f7' }
          }}
        />
      </Paper>
    </Box>
  );
}
